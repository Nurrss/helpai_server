require("dotenv").config();
const OpenAI = require("openai");
const Courses = require("../models/Courses");
const Lessons = require("../models/Lessons");
const Professions = require("../models/Professions");

const openai = new OpenAI({ apiKey: process.env.API_KEY });

const generateCoursesByProfessionsLogic = async (professions, lang) => {
  try {
    console.log("here");

    if (
      !professions ||
      !Array.isArray(professions) ||
      professions.length === 0
    ) {
      throw new Error("Invalid profession list");
    }

    const prompt = `
–ú–µ–Ω–¥–µ –º–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä–¥—ã“£ —Ç—ñ–∑—ñ–º—ñ –±–∞—Ä. –°–µ–Ω—ñ“£ –º—ñ–Ω–¥–µ—Ç—ñ“£ ‚Äì ”ô—Ä –º–∞–º–∞–Ω–¥—ã“õ “Ø—à—ñ–Ω –±—ñ—Ä –∫—É—Ä—Å –æ–π–ª–∞–ø —Ç–∞–±—É –∂”ô–Ω–µ —Å–æ–ª –∫—É—Ä—Å“õ–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω 3 —Å–∞–±–∞“õ “±—Å—ã–Ω—É.
–ö—É—Ä—Å —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä—ã ”©–∑–µ–∫—Ç—ñ, –ø–∞–π–¥–∞–ª—ã –∂”ô–Ω–µ –º–∞–º–∞–Ω–¥—ã“õ“õ–∞ –Ω–∞“õ—Ç—ã –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.
–°–∞–±–∞“õ—Ç–∞—Ä YouTube –≤–∏–¥–µ–æ—Å—ã–Ω–∞ —Å—ñ–ª—Ç–µ–º–µ –∞—Ä“õ—ã–ª—ã –±–µ—Ä—ñ–ª—É—ñ —Ç–∏—ñ—Å.

–ñ–∞—É–∞–ø “õ“±—Ä—ã–ª—ã–º—ã JSON —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –±–æ–ª—Å—ã–Ω:

[
  {
    "profession": "–ë–∞“ì–¥–∞—Ä–ª–∞–º–∞—à—ã",
    "course": {
      "title": "Python –Ω–µ–≥—ñ–∑–¥–µ—Ä—ñ",
      "description": "–ë–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—É–¥—ã –∂–∞“£–∞ “Ø–π—Ä–µ–Ω—ñ–ø –∂–∞—Ç“õ–∞–Ω –æ“õ—É—à—ã–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –∫—É—Ä—Å.",
      "durability": "2 –∞–ø—Ç–∞",
      "lessons": [
        {
          "title": "Python —Ç—ñ–ª—ñ–Ω–µ –∫—ñ—Ä—ñ—Å–ø–µ",
          "link": "https://www.youtube.com/watch?v=rfscVS0vtbw",
          "content": "–ù–µ–≥—ñ–∑–≥—ñ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –∞–π–Ω—ã–º–∞–ª—ã–ª–∞—Ä, —à–∞—Ä—Ç—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–ª–∞—Ä"
        },
        ...
      ]
    }
  }
]

–ú–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ:
${JSON.stringify(professions, null, 2)}

–ñ–∞—É–∞–ø—Ç—ã –º—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç“Ø—Ä–¥–µ ${lang === "ru" ? "–æ—Ä—ã—Å" : "“õ–∞–∑–∞“õ"} —Ç—ñ–ª—ñ–Ω–¥–µ –±–µ—Ä.
    `;

    const completion = await openai.chat.completions.create({
      messages: [{ role: "user", content: prompt }],
      model: "gpt-4.1",
    });

    const responseText = completion.choices[0].message.content;

    let data;
    try {
      data = JSON.parse(responseText);
    } catch (err) {
      throw new Error("AI JSON —Ñ–æ—Ä–º–∞—Ç—ã–Ω –¥“±—Ä—ã—Å “õ–∞–π—Ç–∞—Ä–º–∞–¥—ã: " + responseText);
    }

    const savedCourses = [];

    for (const item of data) {
      const { profession, course } = item;

      const newCourse = new Courses({
        title: course.title,
        description: course.description,
        durability: course.durability,
        lessons: [],
      });

      await newCourse.save();

      const savedLessons = await Promise.all(
        course.lessons.map(async (lesson) => {
          const newLesson = new Lessons({
            title: lesson.title,
            content: lesson.content,
            link: lesson.link,
            course: newCourse._id,
          });
          await newLesson.save();
          return newLesson._id;
        })
      );

      newCourse.lessons = savedLessons;
      await newCourse.save();

      // üëá Clean, duplicate-safe course insertion
      await Professions.updateOne(
        { name: profession },
        { $addToSet: { course: newCourse._id } }
      );

      savedCourses.push(newCourse);
    }

    console.log("–ö—É—Ä—Å—Ç–∞—Ä —Å”ô—Ç—Ç—ñ –∂–∞—Å–∞–ª–¥—ã –∂”ô–Ω–µ —Å–∞“õ—Ç–∞–ª–¥—ã");
    return {
      success: true,
      message: "–ö—É—Ä—Å—Ç–∞—Ä —Å”ô—Ç—Ç—ñ –∂–∞—Å–∞–ª–¥—ã –∂”ô–Ω–µ —Å–∞“õ—Ç–∞–ª–¥—ã",
      courses: savedCourses,
    };
  } catch (err) {
    console.error("courseAiController error:", err);
    throw err; // Let the calling function handle the error
  }
};

module.exports = {
  generateCoursesByProfessionsLogic,
};
