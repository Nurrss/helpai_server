// routes/ai.js
const router = require("express").Router();
require("dotenv").config();
const OpenAI = require("openai");
const Users = require("../models/Users");
const Tests = require("../models/Tests");
const Professions = require("../models/Professions");
const {
  generateCoursesByProfessionsLogic,
} = require("../controllers/courseAiController");

const openai = new OpenAI({ apiKey: process.env.API_KEY });

router.post("/test", async (req, res) => {
  try {
    const { telegram_id, test_answers, lang } = req.body;

    if (!telegram_id || !test_answers || !Array.isArray(test_answers)) {
      return res.status(400).json({ message: "Invalid input" });
    }

    // 1. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await Users.findOne({ telegram_id });
    if (!user) {
      return res.status(404).json({
        message:
          "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
        success: false,
      });
    }

    // 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ OpenAI
    const prompt = `–ú–µ–Ω —Å–∞“ì–∞–Ω –±—ñ—Ä –æ“õ—É—à—ã–Ω—ã“£ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è–ª—ã“õ —Ç–µ—Å—Ç—Ç–µ–≥—ñ –∂–∞—É–∞–ø—Ç–∞—Ä—ã–Ω –±–µ—Ä–µ–º—ñ–Ω. –ñ–∞—É–∞–ø—Ç–∞—Ä –∞–¥–∞–º–Ω—ã“£ “õ—ã–∑—ã“ì—É—à—ã–ª—ã“ì—ã, “õ–∞–±—ñ–ª–µ—Ç—ñ, “õ“±–Ω–¥—ã–ª—ã“ì—ã, —Ç–∞“£–¥–∞—É—ã –∂”ô–Ω–µ –æ—Ä—Ç–∞—Å—ã —Ç—É—Ä–∞–ª—ã. 
–°–µ–Ω—ñ“£ –º—ñ–Ω–¥–µ—Ç—ñ“£ ‚Äî –æ—Å—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ –æ“õ—É—à—ã–Ω—ã“£ –ø—Ä–æ—Ñ–∏–ª—ñ–Ω –∂–∞—Å–∞–ø, –æ“ì–∞–Ω —Å”ô–π–∫–µ—Å 3 –º–∞–º–∞–Ω–¥—ã“õ “±—Å—ã–Ω—É. 
–ñ–∞—É–∞–ø—Ç—ã –ú–Ü–ù–î–ï–¢–¢–Ü —Ç“Ø—Ä–¥–µ –∫–µ–ª–µ—Å—ñ “õ“±—Ä—ã–ª—ã–º –±–æ–π—ã–Ω—à–∞ –∂–∞–∑:

1. “ö—ã—Å“õ–∞—à–∞ “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã (–æ“õ—É—à—ã —Ç—É—Ä–∞–ª—ã —Å–∏–ø–∞—Ç—Ç–∞–º–∞)
2. “∞—Å—ã–Ω—ã–ª–∞—Ç—ã–Ω –º–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä (JSON —Ñ–æ—Ä–º–∞—Ç—Ç–∞ —Å–∞“õ—Ç–∞–ª–∞—Ç—ã–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫)
3. –¢—ñ–ª–¥—ñ –∞–Ω—ã“õ—Ç–∞
4. Roadmap “õ“±—Ä–∞—Å—Ç—ã—Ä—ã–ø –±–µ—Ä 15 “õ–∞–¥–∞–º–∞–Ω–∞–Ω “õ“±—Ä–∞—Å—Ç—ã—Ä—ã–ª“ì–∞–Ω –±–æ–ª—Å—ã–Ω

–ú—ã—Å–∞–ª —Ñ–æ—Ä–º–∞—Ç:
{
  "summary": "–û“õ—É—à—ã ‚Äì –∞–¥–∞–º–¥–∞—Ä–º–µ–Ω —Ç–µ–∑ —Ç—ñ–ª —Ç–∞–±—ã—Å–∞—Ç—ã–Ω, —ç–º–ø–∞—Ç–∏—è—Å—ã –∂–æ“ì–∞—Ä—ã —Ç“±–ª“ì–∞. –û–ª –∫–µ“£–µ—Å –±–µ—Ä—É, –º–æ—Ç–∏–≤–∞—Ü–∏—è –±–µ—Ä—É —Å–∞–ª–∞–ª–∞—Ä—ã–Ω–¥–∞ ”©–∑ “õ–∞–±—ñ–ª–µ—Ç—ñ–Ω –∫”©—Ä—Å–µ—Ç–µ –∞–ª–∞–¥—ã.",
  "professions": ["–ü—Å–∏—Ö–æ–ª–æ–≥", "–ö–æ—É—á", "–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–æ–ª–æ–≥"],
  "roadmap": ["1. –ö—ñ—Ç–∞–ø –æ“õ—É", "2. –ö—É—Ä—Å –æ“õ—É"]
  "lang":"kz"
}

–ú—ñ–Ω–µ, –æ“õ—É—à—ã–Ω—ã“£ –∂–∞—É–∞–ø—Ç–∞—Ä—ã –∂–∞—É–∞–ø—Ç–∞—Ä “õ–∞–π —Ç—ñ–ª–¥–µ –∂–∞–∑—ã–ª“ì–∞–Ω –±–æ–ª—Å–∞ —Å–æ–ª —Ç—ñ–ª–¥–µ –∂–∞—É–∞–ø –±–µ—Ä:
${test_answers.join("\n")}
`;

    const completion = await openai.chat.completions.create({
      messages: [{ role: "user", content: prompt }],
      model: "gpt-4.1",
    });

    const aiText = completion.choices[0].message.content;

    let parsed;
    try {
      parsed = JSON.parse(aiText);
    } catch (err) {
      return res.status(500).json({
        success: false,
        message:
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.",
        raw: aiText,
      });
    }

    const professionNames = parsed.professions;
    const summary = parsed.summary;
    const roadmap = parsed.roadmap;

    let result = "";

    if (lang === "ru") {
      result = `${summary} –í–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: ${professionNames.join(
        ", "
      )}`;
    } else {
      result = `${summary} –°—ñ–∑–≥–µ —Å”ô–π–∫–µ—Å –º–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä: ${professionNames.join(
        ", "
      )}`;
    }

    // 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ –±–∞–∑—É –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const professions = await Promise.all(
      professionNames.map(async (name, index) => {
        let prof = await Professions.findOne({ name });

        // Attach roadmap only if new
        if (!prof) {
          const roadmapItem = Array.isArray(roadmap) ? roadmap : [];
          prof = await new Professions({ name, roadmap: roadmapItem }).save();
        } else {
          // If already exists, update roadmap if it's not already set
          if (!prof.roadmap || prof.roadmap.length === 0) {
            const roadmapItem = Array.isArray(roadmap) ? roadmap : [];
            prof.roadmap = roadmapItem;
            await prof.save();
          }
        }

        return prof._id;
      })
    );

    user.professions = professions;

    // 2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç
    const newTest = new Tests({ user: user._id, test_answers, result });
    await newTest.save();

    user.tests.push(newTest._id);
    await user.save();

    // 5. –û—Ç–≤–µ—Ç–∏—Ç—å –±–æ—Ç—É
    console.log("üìå Roadmap from AI:", roadmap);

    res.status(200).json({
      success: true,
      result,
    });

    const courseGenResult = await generateCoursesByProfessionsLogic(
      professionNames,
      lang
    );
    console.log("–ö—É—Ä—Å—Ç–∞—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞–Ω–¥—ã", courseGenResult);
  } catch (error) {
    console.error("AI error:", error);
    return res.status(500).json({ success: false, message: "AI error" });
  }
});

module.exports = router;
